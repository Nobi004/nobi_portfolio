# Django AI Engineer Portfolio Project

## Project Structure
```
ai_portfolio/
├── ai_portfolio/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
│   └── asgi.py
├── portfolio/
│   ├── __init__.py
│   ├── models.py
│   ├── views.py
│   ├── admin.py
│   ├── urls.py
│   ├── forms.py
│   ├── templates/
│   │   ├── base.html
│   │   ├── home.html
│   │   ├── about.html
│   │   ├── skills.html
│   │   ├── experience.html
│   │   ├── projects.html
│   │   ├── education.html
│   │   ├── blog.html
│   │   └── contact.html
│   ├── static/
│   │   ├── css/
│   │   │   └── style.css
│   │   ├── js/
│   │   │   └── main.js
│   │   └── images/
│   └── migrations/
├── media/
├── requirements.txt
└── manage.py
```

## 1. requirements.txt
```
Django==4.2.7
Pillow==10.1.0
python-decouple==3.8
whitenoise==6.6.0
gunicorn==21.2.0
dj-database-url==2.1.0
psycopg2-binary==2.9.9
```

## 2. ai_portfolio/settings.py
```python
from pathlib import Path
import os
from decouple import config
import dj_database_url

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-your-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolio',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ai_portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'ai_portfolio.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

## 12. portfolio/static/js/main.js
```javascript
// Mobile Navigation Toggle
document.addEventListener('DOMContentLoaded', function() {
    const navToggle = document.getElementById('navToggle');
    const navMenu = document.getElementById('navMenu');
    
    navToggle.addEventListener('click', function() {
        navMenu.classList.toggle('active');
    });
    
    // Close mobile menu when clicking outside
    document.addEventListener('click', function(event) {
        if (!navToggle.contains(event.target) && !navMenu.contains(event.target)) {
            navMenu.classList.remove('active');
        }
    });
    
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
    
    // Animate skill bars when in view
    const observerOptions = {
        threshold: 0.5,
        rootMargin: '0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const skillBars = entry.target.querySelectorAll('.skill-progress');
                skillBars.forEach(bar => {
                    const level = bar.getAttribute('data-level');
                    bar.style.width = level + '%';
                });
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);
    
    const skillSections = document.querySelectorAll('.skills-grid');
    skillSections.forEach(section => {
        observer.observe(section);
    });
    
    // Auto-hide messages after 5 seconds
    const messages = document.querySelectorAll('.alert');
    messages.forEach(message => {
        setTimeout(() => {
            message.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                message.remove();
            }, 300);
        }, 5000);
    });
});

// Add animation for slideOut
const style = document.createElement('style');
style.textContent = `
    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);
```

## 13. portfolio/templates/about.html
```html
{% extends 'base.html' %}
{% load static %}

{% block title %}About - AI Engineer Portfolio{% endblock %}

{% block content %}
<section class="about-section">
    <div class="container">
        <h1 class="section-title">About Me</h1>
        
        <div class="about-content">
            {% if profile.profile_picture %}
            <div class="profile-image-container">
                <img src="{{ profile.profile_picture.url }}" alt="{{ profile.name }}" class="profile-image">
            </div>
            {% endif %}
            
            <div class="bio-content">
                <h2>{{ profile.name }}</h2>
                <h3>{{ profile.title }}</h3>
                
                <div class="bio-text">
                    {{ profile.bio|linebreaks }}
                </div>
                
                <div class="contact-info">
                    {% if profile.email %}
                    <p><i class="fas fa-envelope"></i> {{ profile.email }}</p>
                    {% endif %}
                    {% if profile.phone %}
                    <p><i class="fas fa-phone"></i> {{ profile.phone }}</p>
                    {% endif %}
                    {% if profile.location %}
                    <p><i class="fas fa-map-marker-alt"></i> {{ profile.location }}</p>
                    {% endif %}
                </div>
                
                <div class="social-links">
                    {% if profile.github_url %}
                    <a href="{{ profile.github_url }}" target="_blank" aria-label="GitHub">
                        <i class="fab fa-github"></i>
                    </a>
                    {% endif %}
                    {% if profile.linkedin_url %}
                    <a href="{{ profile.linkedin_url }}" target="_blank" aria-label="LinkedIn">
                        <i class="fab fa-linkedin"></i>
                    </a>
                    {% endif %}
                    {% if profile.twitter_url %}
                    <a href="{{ profile.twitter_url }}" target="_blank" aria-label="Twitter">
                        <i class="fab fa-twitter"></i>
                    </a>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</section>

<style>
.about-content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 3rem;
    align-items: start;
    max-width: 1000px;
    margin: 0 auto;
}

.profile-image-container {
    text-align: center;
}

.profile-image {
    width: 100%;
    max-width: 300px;
    border-radius: 50%;
    box-shadow: var(--shadow);
}

.bio-content h2 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

.bio-content h3 {
    color: var(--text-color);
    font-weight: normal;
    margin-bottom: 2rem;
}

.bio-text {
    margin-bottom: 2rem;
    line-height: 1.8;
}

.contact-info {
    margin-bottom: 2rem;
}

.contact-info p {
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.contact-info i {
    color: var(--primary-color);
    width: 20px;
}

@media (max-width: 768px) {
    .about-content {
        grid-template-columns: 1fr;
        text-align: center;
    }
    
    .contact-info p {
        justify-content: center;
    }
}
</style>
{% endblock %}
```

## 14. portfolio/templates/skills.html
```html
{% extends 'base.html' %}
{% load static %}

{% block title %}Skills - AI Engineer Portfolio{% endblock %}

{% block content %}
<section class="skills-section">
    <div class="container">
        <h1 class="section-title">Technical Skills</h1>
        
        {% for category in categories %}
        <div class="skill-category">
            <h3>{{ category.name }}</h3>
            
            <div class="skills-grid">
                {% for skill in category.skills.all %}
                <div class="skill-item">
                    <div class="skill-header">
                        <span class="skill-name">
                            {% if skill.icon %}
                            <i class="{{ skill.icon }}"></i>
                            {% endif %}
                            {{ skill.name }}
                        </span>
                        <span class="skill-level">{{ skill.level }}%</span>
                    </div>
                    <div class="skill-bar">
                        <div class="skill-progress" data-level="{{ skill.level }}" style="width: 0%;"></div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>
</section>
{% endblock %}
```

## 15. portfolio/templates/experience.html
```html
{% extends 'base.html' %}
{% load static %}

{% block title %}Experience - AI Engineer Portfolio{% endblock %}

{% block content %}
<section class="experience-section">
    <div class="container">
        <h1 class="section-title">Professional Experience</h1>
        
        <div class="experience-timeline">
            {% for exp in experiences %}
            <div class="experience-item">
                <div class="experience-header">
                    {% if exp.company_logo %}
                    <img src="{{ exp.company_logo.url }}" alt="{{ exp.company_name }}" class="company-logo">
                    {% endif %}
                    <div class="experience-info">
                        <h3>{{ exp.job_title }}</h3>
                        <h4>{{ exp.company_name }}</h4>
                        <p class="experience-meta">
                            {{ exp.start_date|date:"M Y" }} - 
                            {% if exp.is_current %}
                                Present
                            {% elif exp.end_date %}
                                {{ exp.end_date|date:"M Y" }}
                            {% endif %}
                            {% if exp.location %} | {{ exp.location }}{% endif %}
                        </p>
                    </div>
                </div>
                
                {% if exp.description %}
                <p>{{ exp.description }}</p>
                {% endif %}
                
                {% if exp.bullet_points %}
                <ul class="experience-bullets">
                    {% for bullet in exp.bullet_points.splitlines %}
                        {% if bullet %}
                        <li>{{ bullet }}</li>
                        {% endif %}
                    {% endfor %}
                </ul>
                {% endif %}
            </div>
            {% endfor %}
        </div>
    </div>
</section>
{% endblock %}
```

## 16. portfolio/templates/projects.html
```html
{% extends 'base.html' %}
{% load static %}

{% block title %}Projects - AI Engineer Portfolio{% endblock %}

{% block content %}
<section class="projects-section">
    <div class="container">
        <h1 class="section-title">Projects</h1>
        
        <div class="project-grid">
            {% for project in projects %}
            <div class="project-card">
                {% if project.image %}
                <img src="{{ project.image.url }}" alt="{{ project.title }}" class="project-image">
                {% endif %}
                
                <div class="project-content">
                    <h3>{{ project.title }}</h3>
                    <p>{{ project.short_description }}</p>
                    
                    {% if project.detailed_description %}
                    <details class="project-details">
                        <summary>Read more</summary>
                        <p>{{ project.detailed_description }}</p>
                    </details>
                    {% endif %}
                    
                    <div class="project-tags">
                        {% for tag in project.tags.all %}
                        <span class="tag">{{ tag.name }}</span>
                        {% endfor %}
                    </div>
                    
                    <div class="project-links">
                        {% if project.github_url %}
                        <a href="{{ project.github_url }}" target="_blank" class="project-link">
                            <i class="fab fa-github"></i> View Code
                        </a>
                        {% endif %}
                        {% if project.demo_url %}
                        <a href="{{ project.demo_url }}" target="_blank" class="project-link">
                            <i class="fas fa-external-link-alt"></i> Live Demo
                        </a>
                        {% endif %}
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</section>

<style>
.project-details {
    margin-top: 1rem;
}

.project-details summary {
    cursor: pointer;
    color: var(--primary-color);
    font-weight: 500;
    margin-bottom: 0.5rem;
}

.project-details p {
    margin-top: 0.5rem;
    color: var(--text-color);
}
</style>
{% endblock %}
```

## 17. portfolio/templates/education.html
```html
{% extends 'base.html' %}
{% load static %}

{% block title %}Education - AI Engineer Portfolio{% endblock %}

{% block content %}
<section class="education-section">
    <div class="container">
        <h1 class="section-title">Education & Certifications</h1>
        
        <div class="education-subsection">
            <h2>Education</h2>
            <div class="education-grid">
                {% for edu in education %}
                <div class="education-card">
                    {% if edu.institution_logo %}
                    <img src="{{ edu.institution_logo.url }}" alt="{{ edu.institution }}" class="institution-logo">
                    {% endif %}
                    <div class="education-info">
                        <h3>{{ edu.degree }}</h3>
                        <h4>{{ edu.institution }}</h4>
                        <p class="education-meta">
                            {{ edu.start_year }} - 
                            {% if edu.end_year %}{{ edu.end_year }}{% else %}Present{% endif %}
                        </p>
                        {% if edu.description %}
                        <p>{{ edu.description }}</p>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        
        {% if certifications %}
        <div class="education-subsection">
            <h2>Certifications</h2>
            <div class="education-grid">
                {% for cert in certifications %}
                <div class="education-card">
                    {% if cert.logo %}
                    <img src="{{ cert.logo.url }}" alt="{{ cert.issuing_organization }}" class="institution-logo">
                    {% endif %}
                    <div class="education-info">
                        <h3>{{ cert.title }}</h3>
                        <h4>{{ cert.issuing_organization }}</h4>
                        <p class="education-meta">
                            Issued: {{ cert.issue_date|date:"M Y" }}
                            {% if cert.expiry_date %} | Expires: {{ cert.expiry_date|date:"M Y" }}{% endif %}
                        </p>
                        {% if cert.credential_id %}
                        <p>Credential ID: {{ cert.credential_id }}</p>
                        {% endif %}
                        {% if cert.credential_url %}
                        <a href="{{ cert.credential_url }}" target="_blank" class="btn btn-outline">
                            <i class="fas fa-certificate"></i> View Credential
                        </a>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endif %}
    </div>
</section>

<style>
.education-subsection {
    margin-bottom: 3rem;
}

.education-subsection h2 {
    margin-bottom: 2rem;
    color: var(--primary-color);
}

.education-info h4 {
    color: var(--text-color);
    font-weight: normal;
}

.education-meta {
    color: var(--text-color);
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
}
</style>
{% endblock %}
```

## 18. portfolio/templates/blog.html
```html
{% extends 'base.html' %}
{% load static %}

{% block title %}Blog & Publications - AI Engineer Portfolio{% endblock %}

{% block content %}
<section class="blog-section">
    <div class="container">
        <h1 class="section-title">Blog Posts & Publications</h1>
        
        <div class="blog-grid">
            {% for post in posts %}
            <article class="blog-card">
                {% if post.featured_image %}
                <img src="{{ post.featured_image.url }}" alt="{{ post.title }}" class="blog-image">
                {% endif %}
                
                <div class="blog-content">
                    <h3>
                        <a href="{{ post.external_url }}" target="_blank">
                            {{ post.title }}
                            <i class="fas fa-external-link-alt"></i>
                        </a>
                    </h3>
                    
                    <p class="blog-meta">
                        <i class="fas fa-calendar"></i> {{ post.publication_date|date:"M d, Y" }} |
                        <i class="fas fa-globe"></i> {{ post.publication_platform }}
                    </p>
                    
                    <p>{{ post.summary }}</p>
                    
                    {% if post.tags.exists %}
                    <div class="blog-tags">
                        {% for tag in post.tags.all %}
                        <span class="tag">{{ tag.name }}</span>
                        {% endfor %}
                    </div>
                    {% endif %}
                </div>
            </article>
            {% endfor %}
        </div>
        
        {% if page_obj %}
        <div class="pagination">
            <span class="page-links">
                {% if page_obj.has_previous %}
                    <a href="?page=1">&laquo; First</a>
                    <a href="?page={{ page_obj.previous_page_number }}">Previous</a>
                {% endif %}
                
                <span class="current-page">
                    Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}
                </span>
                
                {% if page_obj.has_next %}
                    <a href="?page={{ page_obj.next_page_number }}">Next</a>
                    <a href="?page={{ page_obj.paginator.num_pages }}">Last &raquo;</a>
                {% endif %}
            </span>
        </div>
        {% endif %}
    </div>
</section>

<style>
.blog-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 8px 8px 0 0;
    margin: -1.5rem -1.5rem 1rem -1.5rem;
}

.blog-content h3 a {
    color: var(--dark-color);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.blog-content h3 a i {
    font-size: 0.875rem;
    color: var(--text-color);
}

.blog-tags {
    margin-top: 1rem;
}

.pagination {
    text-align: center;
    margin-top: 3rem;
}

.page-links {
    display: inline-flex;
    gap: 1rem;
    align-items: center;
}

.page-links a {
    padding: 0.5rem 1rem;
    background-color: white;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    transition: all 0.3s ease;
}

.page-links a:hover {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.current-page {
    color: var(--text-color);
    font-weight: 500;
}
</style>
{% endblock %}
```

## 19. portfolio/templates/contact.html
```html
{% extends 'base.html' %}
{% load static %}

{% block title %}Contact - AI Engineer Portfolio{% endblock %}

{% block content %}
<section class="contact-section">
    <div class="container">
        <h1 class="section-title">Get In Touch</h1>
        
        <div class="contact-content">
            <form method="post" class="contact-form">
                {% csrf_token %}
                
                <div class="form-group">
                    <label for="{{ form.name.id_for_label }}" class="form-label">Name</label>
                    {{ form.name }}
                </div>
                
                <div class="form-group">
                    <label for="{{ form.email.id_for_label }}" class="form-label">Email</label>
                    {{ form.email }}
                </div>
                
                <div class="form-group">
                    <label for="{{ form.subject.id_for_label }}" class="form-label">Subject</label>
                    {{ form.subject }}
                </div>
                
                <div class="form-group">
                    <label for="{{ form.message.id_for_label }}" class="form-label">Message</label>
                    {{ form.message }}
                </div>
                
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Send Message
                </button>
            </form>
        </div>
    </div>
</section>

<style>
.contact-content {
    max-width: 600px;
    margin: 0 auto;
}

.contact-form {
    background-color: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: var(--shadow);
}
</style>
{% endblock %}
```

## 20. manage.py
```python
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ai_portfolio.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
```

## 21. .env (Example - Create this file and add to .gitignore)
```
SECRET_KEY=your-secret-key-here
DEBUG=True
DATABASE_URL=postgresql://username:password@localhost:5432/dbname
```

## 22. .gitignore
```
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
VENV/
.venv

# Django
*.log
*.pot
*.pyc
local_settings.py
db.sqlite3
db.sqlite3-journal
media/

# Static files
staticfiles/
static_root/

# Environment variables
.env
.env.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Production
*.pem
*.key
```

## Setup Instructions

1. **Create Virtual Environment**
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

2. **Install Dependencies**
```bash
pip install -r requirements.txt
```

3. **Create .env File**
```bash
# Copy the .env example and update with your values
```

4. **Run Migrations**
```bash
python manage.py makemigrations
python manage.py migrate
```

5. **Create Superuser**
```bash
python manage.py createsuperuser
```

6. **Collect Static Files**
```bash
python manage.py collectstatic --noinput
```

7. **Run Development Server**
```bash
python manage.py runserver
```

8. **Access the Application**
- Main site: http://localhost:8000
- Admin panel: http://localhost:8000/admin

## Deployment Instructions

### For Heroku:
1. Create `Procfile`:
```
web: gunicorn ai_portfolio.wsgi --log-file -
```

2. Create `runtime.txt`:
```
python-3.11.5
```

3. Update `settings.py` for production
4. Push to Heroku

### For DigitalOcean/VPS:
1. Install Nginx and Gunicorn
2. Configure Nginx to proxy to Gunicorn
3. Set up systemd service for Gunicorn
4. Configure SSL with Let's Encrypt

## Features Implemented

✅ **Dynamic Content Management**: All content manageable via Django Admin
✅ **Responsive Design**: Mobile-first approach with clean Google-style UI
✅ **SEO Optimized**: Semantic HTML and meta tags
✅ **Media Uploads**: Support for images, PDFs, and logos
✅ **Contact Form**: Saves submissions to database
✅ **Skills with Progress Bars**: Animated skill levels
✅ **Timeline Experience**: Professional experience in timeline format
✅ **Project Filtering**: Tags for categorizing projects
✅ **Blog Integration**: External blog posts with metadata
✅ **Social Links**: GitHub, LinkedIn, Twitter integration
✅ **Smooth Animations**: CSS and JavaScript animations
✅ **Admin Customization**: Organized and user-friendly admin interface

## Next Steps

1. Add more styling customizations as needed
2. Implement email notifications for contact form
3. Add portfolio analytics
4. Implement project search/filter functionality
5. Add testimonials section
6. Implement dark mode toggle
7. Add more animation effects
8. Optimize images with thumbnails
9. Add caching for better performance
10. Implement full-text search

# Use PostgreSQL in production
if not DEBUG:
    DATABASES['default'] = dj_database_url.config(
        default=config('DATABASE_URL')
    )

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = []

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Backend (optional)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
```

## 3. ai_portfolio/urls.py
```python
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('portfolio.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
```

## 4. portfolio/models.py
```python
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

class Profile(models.Model):
    name = models.CharField(max_length=100)
    title = models.CharField(max_length=200)
    tagline = models.CharField(max_length=300)
    bio = models.TextField()
    profile_picture = models.ImageField(upload_to='profile/', blank=True, null=True)
    resume = models.FileField(upload_to='resume/', blank=True, null=True)
    github_url = models.URLField(blank=True)
    linkedin_url = models.URLField(blank=True)
    twitter_url = models.URLField(blank=True)
    email = models.EmailField()
    phone = models.CharField(max_length=20, blank=True)
    location = models.CharField(max_length=100, blank=True)
    
    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name_plural = "Profile"

class SkillCategory(models.Model):
    name = models.CharField(max_length=100)
    order = models.IntegerField(default=0)
    
    def __str__(self):
        return self.name
    
    class Meta:
        ordering = ['order']
        verbose_name_plural = "Skill Categories"

class Skill(models.Model):
    category = models.ForeignKey(SkillCategory, on_delete=models.CASCADE, related_name='skills')
    name = models.CharField(max_length=100)
    icon = models.CharField(max_length=50, blank=True, help_text="Font Awesome icon class")
    level = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(100)],
        help_text="Skill level from 1 to 100"
    )
    order = models.IntegerField(default=0)
    
    def __str__(self):
        return f"{self.name} ({self.category.name})"
    
    class Meta:
        ordering = ['order', 'name']

class Experience(models.Model):
    job_title = models.CharField(max_length=200)
    company_name = models.CharField(max_length=200)
    company_logo = models.ImageField(upload_to='companies/', blank=True, null=True)
    start_date = models.DateField()
    end_date = models.DateField(blank=True, null=True)
    is_current = models.BooleanField(default=False)
    location = models.CharField(max_length=100, blank=True)
    description = models.TextField(blank=True)
    bullet_points = models.TextField(help_text="Enter each bullet point on a new line")
    
    def __str__(self):
        return f"{self.job_title} at {self.company_name}"
    
    class Meta:
        ordering = ['-start_date']
        verbose_name_plural = "Experiences"

class ProjectTag(models.Model):
    name = models.CharField(max_length=50, unique=True)
    
    def __str__(self):
        return self.name

class Project(models.Model):
    title = models.CharField(max_length=200)
    short_description = models.CharField(max_length=300)
    detailed_description = models.TextField(blank=True)
    image = models.ImageField(upload_to='projects/', blank=True, null=True)
    tags = models.ManyToManyField(ProjectTag, blank=True)
    github_url = models.URLField(blank=True)
    demo_url = models.URLField(blank=True)
    order = models.IntegerField(default=0)
    featured = models.BooleanField(default=False)
    
    def __str__(self):
        return self.title
    
    class Meta:
        ordering = ['-featured', 'order', '-id']

class Education(models.Model):
    degree = models.CharField(max_length=200)
    institution = models.CharField(max_length=200)
    institution_logo = models.ImageField(upload_to='education/', blank=True, null=True)
    start_year = models.IntegerField()
    end_year = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True)
    
    def __str__(self):
        return f"{self.degree} - {self.institution}"
    
    class Meta:
        ordering = ['-start_year']
        verbose_name_plural = "Education"

class Certification(models.Model):
    title = models.CharField(max_length=200)
    issuing_organization = models.CharField(max_length=200)
    logo = models.ImageField(upload_to='certifications/', blank=True, null=True)
    issue_date = models.DateField()
    expiry_date = models.DateField(blank=True, null=True)
    credential_id = models.CharField(max_length=100, blank=True)
    credential_url = models.URLField(blank=True)
    
    def __str__(self):
        return f"{self.title} - {self.issuing_organization}"
    
    class Meta:
        ordering = ['-issue_date']

class BlogPost(models.Model):
    title = models.CharField(max_length=200)
    summary = models.TextField(max_length=500)
    publication_platform = models.CharField(max_length=100)
    publication_date = models.DateField()
    external_url = models.URLField()
    tags = models.ManyToManyField(ProjectTag, blank=True)
    featured_image = models.ImageField(upload_to='blog/', blank=True, null=True)
    
    def __str__(self):
        return self.title
    
    class Meta:
        ordering = ['-publication_date']

class ContactMessage(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    subject = models.CharField(max_length=200, blank=True)
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_read = models.BooleanField(default=False)
    
    def __str__(self):
        return f"Message from {self.name} - {self.created_at.strftime('%Y-%m-%d')}"
    
    class Meta:
        ordering = ['-created_at']
```

## 5. portfolio/admin.py
```python
from django.contrib import admin
from .models import (
    Profile, SkillCategory, Skill, Experience, 
    ProjectTag, Project, Education, Certification, 
    BlogPost, ContactMessage
)

@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    list_display = ['name', 'title', 'email']

@admin.register(SkillCategory)
class SkillCategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'order']
    list_editable = ['order']

@admin.register(Skill)
class SkillAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'level', 'order']
    list_filter = ['category']
    list_editable = ['level', 'order']

@admin.register(Experience)
class ExperienceAdmin(admin.ModelAdmin):
    list_display = ['job_title', 'company_name', 'start_date', 'is_current']
    list_filter = ['is_current']

@admin.register(ProjectTag)
class ProjectTagAdmin(admin.ModelAdmin):
    list_display = ['name']

@admin.register(Project)
class ProjectAdmin(admin.ModelAdmin):
    list_display = ['title', 'featured', 'order']
    list_filter = ['featured', 'tags']
    list_editable = ['featured', 'order']
    filter_horizontal = ['tags']

@admin.register(Education)
class EducationAdmin(admin.ModelAdmin):
    list_display = ['degree', 'institution', 'start_year']

@admin.register(Certification)
class CertificationAdmin(admin.ModelAdmin):
    list_display = ['title', 'issuing_organization', 'issue_date']

@admin.register(BlogPost)
class BlogPostAdmin(admin.ModelAdmin):
    list_display = ['title', 'publication_platform', 'publication_date']
    list_filter = ['publication_platform', 'tags']
    filter_horizontal = ['tags']

@admin.register(ContactMessage)
class ContactMessageAdmin(admin.ModelAdmin):
    list_display = ['name', 'email', 'subject', 'created_at', 'is_read']
    list_filter = ['is_read', 'created_at']
    readonly_fields = ['name', 'email', 'subject', 'message', 'created_at']
    
    def has_add_permission(self, request):
        return False
```

## 6. portfolio/forms.py
```python
from django import forms
from .models import ContactMessage

class ContactForm(forms.ModelForm):
    class Meta:
        model = ContactMessage
        fields = ['name', 'email', 'subject', 'message']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Your Name'
            }),
            'email': forms.EmailInput(attrs={
                'class': 'form-control',
                'placeholder': 'your.email@example.com'
            }),
            'subject': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Subject (optional)'
            }),
            'message': forms.Textarea(attrs={
                'class': 'form-control',
                'placeholder': 'Your message...',
                'rows': 5
            }),
        }
```

## 7. portfolio/views.py
```python
from django.shortcuts import render, redirect
from django.views.generic import ListView, DetailView, CreateView
from django.contrib import messages
from django.urls import reverse_lazy
from .models import (
    Profile, SkillCategory, Experience, Project, 
    Education, Certification, BlogPost
)
from .forms import ContactForm

def home_view(request):
    profile = Profile.objects.first()
    featured_projects = Project.objects.filter(featured=True)[:3]
    recent_posts = BlogPost.objects.all()[:3]
    
    context = {
        'profile': profile,
        'featured_projects': featured_projects,
        'recent_posts': recent_posts,
    }
    return render(request, 'home.html', context)

def about_view(request):
    profile = Profile.objects.first()
    return render(request, 'about.html', {'profile': profile})

def skills_view(request):
    categories = SkillCategory.objects.prefetch_related('skills')
    return render(request, 'skills.html', {'categories': categories})

def experience_view(request):
    experiences = Experience.objects.all()
    return render(request, 'experience.html', {'experiences': experiences})

class ProjectListView(ListView):
    model = Project
    template_name = 'projects.html'
    context_object_name = 'projects'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['tags'] = ProjectTag.objects.all()
        return context

def education_view(request):
    education = Education.objects.all()
    certifications = Certification.objects.all()
    
    context = {
        'education': education,
        'certifications': certifications,
    }
    return render(request, 'education.html', context)

class BlogListView(ListView):
    model = BlogPost
    template_name = 'blog.html'
    context_object_name = 'posts'
    paginate_by = 10

class ContactCreateView(CreateView):
    form_class = ContactForm
    template_name = 'contact.html'
    success_url = reverse_lazy('contact')
    
    def form_valid(self, form):
        messages.success(self.request, 'Thank you for your message! I will get back to you soon.')
        return super().form_valid(form)
```

## 8. portfolio/urls.py
```python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home_view, name='home'),
    path('about/', views.about_view, name='about'),
    path('skills/', views.skills_view, name='skills'),
    path('experience/', views.experience_view, name='experience'),
    path('projects/', views.ProjectListView.as_view(), name='projects'),
    path('education/', views.education_view, name='education'),
    path('blog/', views.BlogListView.as_view(), name='blog'),
    path('contact/', views.ContactCreateView.as_view(), name='contact'),
]
```

## 9. portfolio/templates/base.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="AI Engineer Portfolio - Machine Learning, Deep Learning, and AI Solutions">
    <title>{% block title %}AI Engineer Portfolio{% endblock %}</title>
    
    {% load static %}
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar">
        <div class="container">
            <a href="{% url 'home' %}" class="logo">AI Portfolio</a>
            
            <button class="nav-toggle" id="navToggle">
                <span></span>
                <span></span>
                <span></span>
            </button>
            
            <ul class="nav-menu" id="navMenu">
                <li><a href="{% url 'home' %}" class="nav-link">Home</a></li>
                <li><a href="{% url 'about' %}" class="nav-link">About</a></li>
                <li><a href="{% url 'skills' %}" class="nav-link">Skills</a></li>
                <li><a href="{% url 'experience' %}" class="nav-link">Experience</a></li>
                <li><a href="{% url 'projects' %}" class="nav-link">Projects</a></li>
                <li><a href="{% url 'education' %}" class="nav-link">Education</a></li>
                <li><a href="{% url 'blog' %}" class="nav-link">Blog</a></li>
                <li><a href="{% url 'contact' %}" class="nav-link">Contact</a></li>
            </ul>
        </div>
    </nav>
    
    <!-- Messages -->
    {% if messages %}
        <div class="messages">
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }}">
                    {{ message }}
                </div>
            {% endfor %}
        </div>
    {% endif %}
    
    <!-- Main Content -->
    <main>
        {% block content %}{% endblock %}
    </main>
    
    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 AI Engineer Portfolio. All rights reserved.</p>
        </div>
    </footer>
    
    <!-- Custom JS -->
    <script src="{% static 'js/main.js' %}"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>
```

## 10. portfolio/templates/home.html
```html
{% extends 'base.html' %}
{% load static %}

{% block title %}Home - AI Engineer Portfolio{% endblock %}

{% block content %}
<!-- Hero Section -->
<section class="hero">
    <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">{{ profile.name }}</h1>
            <h2 class="hero-subtitle">{{ profile.title }}</h2>
            <p class="hero-tagline">{{ profile.tagline }}</p>
            
            <div class="hero-buttons">
                {% if profile.resume %}
                    <a href="{{ profile.resume.url }}" class="btn btn-primary" download>
                        <i class="fas fa-download"></i> Download Resume
                    </a>
                {% endif %}
                <a href="{% url 'contact' %}" class="btn btn-secondary">
                    <i class="fas fa-envelope"></i> Get In Touch
                </a>
            </div>
            
            <div class="social-links">
                {% if profile.github_url %}
                    <a href="{{ profile.github_url }}" target="_blank" aria-label="GitHub">
                        <i class="fab fa-github"></i>
                    </a>
                {% endif %}
                {% if profile.linkedin_url %}
                    <a href="{{ profile.linkedin_url }}" target="_blank" aria-label="LinkedIn">
                        <i class="fab fa-linkedin"></i>
                    </a>
                {% endif %}
                {% if profile.twitter_url %}
                    <a href="{{ profile.twitter_url }}" target="_blank" aria-label="Twitter">
                        <i class="fab fa-twitter"></i>
                    </a>
                {% endif %}
            </div>
        </div>
    </div>
</section>

<!-- Featured Projects -->
{% if featured_projects %}
<section class="featured-projects">
    <div class="container">
        <h2 class="section-title">Featured Projects</h2>
        
        <div class="project-grid">
            {% for project in featured_projects %}
            <div class="project-card">
                {% if project.image %}
                    <img src="{{ project.image.url }}" alt="{{ project.title }}" class="project-image">
                {% endif %}
                <div class="project-content">
                    <h3>{{ project.title }}</h3>
                    <p>{{ project.short_description }}</p>
                    <div class="project-tags">
                        {% for tag in project.tags.all %}
                            <span class="tag">{{ tag.name }}</span>
                        {% endfor %}
                    </div>
                    <div class="project-links">
                        {% if project.github_url %}
                            <a href="{{ project.github_url }}" target="_blank" class="project-link">
                                <i class="fab fa-github"></i> Code
                            </a>
                        {% endif %}
                        {% if project.demo_url %}
                            <a href="{{ project.demo_url }}" target="_blank" class="project-link">
                                <i class="fas fa-external-link-alt"></i> Demo
                            </a>
                        {% endif %}
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
        
        <div class="text-center mt-4">
            <a href="{% url 'projects' %}" class="btn btn-outline">View All Projects</a>
        </div>
    </div>
</section>
{% endif %}

<!-- Recent Blog Posts -->
{% if recent_posts %}
<section class="recent-posts">
    <div class="container">
        <h2 class="section-title">Recent Blog Posts</h2>
        
        <div class="blog-grid">
            {% for post in recent_posts %}
            <article class="blog-card">
                <h3><a href="{{ post.external_url }}" target="_blank">{{ post.title }}</a></h3>
                <p class="blog-meta">
                    <i class="fas fa-calendar"></i> {{ post.publication_date|date:"M d, Y" }} |
                    <i class="fas fa-globe"></i> {{ post.publication_platform }}
                </p>
                <p>{{ post.summary }}</p>
            </article>
            {% endfor %}
        </div>
        
        <div class="text-center mt-4">
            <a href="{% url 'blog' %}" class="btn btn-outline">View All Posts</a>
        </div>
    </div>
</section>
{% endif %}
{% endblock %}
```

## 11. portfolio/static/css/style.css
```css
/* CSS Variables */
:root {
    --primary-color: #4285f4;
    --secondary-color: #34a853;
    --danger-color: #ea4335;
    --warning-color: #fbbc05;
    --dark-color: #202124;
    --light-color: #f8f9fa;
    --text-color: #5f6368;
    --border-color: #dadce0;
    --shadow: 0 1px 2px 0 rgba(60,64,67,.3), 0 1px 3px 1px rgba(60,64,67,.15);
    --shadow-hover: 0 1px 3px 0 rgba(60,64,67,.3), 0 4px 8px 3px rgba(60,64,67,.15);
}

/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    font-size: 16px;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--light-color);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
    color: var(--dark-color);
    margin-bottom: 1rem;
}

h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.5rem; }

a {
    color: var(--primary-color);
    text-decoration: none;
    transition: color 0.3s ease;
}

a:hover {
    color: darken(var(--primary-color), 10%);
}

/* Navigation */
.navbar {
    background-color: white;
    box-shadow: var(--shadow);
    position: sticky;
    top: 0;
    z-index: 1000;
}

.navbar .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 20px;
}

.logo {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--dark-color);
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-link {
    color: var(--text-color);
    font-weight: 500;
    padding: 0.5rem 0;
    position: relative;
}

.nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
}

.nav-link:hover::after {
    width: 100%;
}

.nav-toggle {
    display: none;
    flex-direction: column;
    background: none;
    border: none;
    cursor: pointer;
}

.nav-toggle span {
    width: 25px;
    height: 3px;
    background-color: var(--dark-color);
    margin: 3px 0;
    transition: 0.3s;
}

/* Hero Section */
.hero {
    padding: 4rem 0;
    text-align: center;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
}

.hero-title {
    font-size: 3rem;
    margin-bottom: 0.5rem;
}

.hero-subtitle {
    font-size: 1.5rem;
    color: var(--text-color);
    font-weight: normal;
    margin-bottom: 1rem;
}

.hero-tagline {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
}

.hero-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
}

/* Buttons */
.btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
}

.btn-primary:hover {
    background-color: #1a73e8;
    box-shadow: var(--shadow-hover);
}

.btn-secondary {
    background-color: var(--secondary-color);
    color: white;
}

.btn-secondary:hover {
    background-color: #2d8e47;
    box-shadow: var(--shadow-hover);
}

.btn-outline {
    background-color: transparent;
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
}

.btn-outline:hover {
    background-color: var(--primary-color);
    color: white;
}

/* Social Links */
.social-links {
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.social-links a {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--dark-color);
    color: white;
    transition: transform 0.3s ease;
}

.social-links a:hover {
    transform: translateY(-3px);
}

/* Section Styles */
section {
    padding: 4rem 0;
}

.section-title {
    text-align: center;
    margin-bottom: 3rem;
}

/* Cards */
.card {
    background-color: white;
    border-radius: 8px;
    box-shadow: var(--shadow);
    padding: 2rem;
    transition: box-shadow 0.3s ease;
}

.card:hover {
    box-shadow: var(--shadow-hover);
}

/* Project Grid */
.project-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
}

.project-card {
    background-color: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: var(--shadow);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.project-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-hover);
}

.project-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.project-content {
    padding: 1.5rem;
}

.project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 1rem 0;
}

.tag {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    background-color: var(--light-color);
    color: var(--text-color);
    border-radius: 20px;
    font-size: 0.875rem;
}

.project-links {
    display: flex;
    gap: 1rem;
}

.project-link {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--text-color);
    font-size: 0.875rem;
}

.project-link:hover {
    color: var(--primary-color);
}

/* Skills Section */
.skill-category {
    margin-bottom: 3rem;
}

.skill-category h3 {
    margin-bottom: 1.5rem;
    color: var(--primary-color);
}

.skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.skill-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.skill-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.skill-name {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
}

.skill-level {
    font-size: 0.875rem;
    color: var(--text-color);
}

.skill-bar {
    width: 100%;
    height: 8px;
    background-color: #e0e0e0;
    border-radius: 4px;
    overflow: hidden;
}

.skill-progress {
    height: 100%;
    background-color: var(--primary-color);
    border-radius: 4px;
    transition: width 1s ease;
}

/* Experience Timeline */
.experience-timeline {
    position: relative;
    padding-left: 2rem;
}

.experience-timeline::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 2px;
    background-color: var(--border-color);
}

.experience-item {
    position: relative;
    padding-bottom: 3rem;
}

.experience-item::before {
    content: '';
    position: absolute;
    left: -2.5rem;
    top: 0;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: var(--primary-color);
    border: 2px solid white;
}

.experience-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
}

.company-logo {
    width: 60px;
    height: 60px;
    object-fit: contain;
    border-radius: 8px;
    border: 1px solid var(--border-color);
    padding: 0.5rem;
}

.experience-info h3 {
    margin-bottom: 0.25rem;
}

.experience-meta {
    color: var(--text-color);
    font-size: 0.875rem;
}

.experience-bullets {
    margin-top: 1rem;
    padding-left: 1.5rem;
}

.experience-bullets li {
    margin-bottom: 0.5rem;
    line-height: 1.6;
}

/* Education Cards */
.education-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.education-card {
    display: flex;
    gap: 1rem;
    padding: 1.5rem;
    background-color: white;
    border-radius: 8px;
    box-shadow: var(--shadow);
}

.institution-logo {
    width: 80px;
    height: 80px;
    object-fit: contain;
    flex-shrink: 0;
}

/* Blog Grid */
.blog-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
}

.blog-card {
    background-color: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: var(--shadow);
    transition: transform 0.3s ease;
}

.blog-card:hover {
    transform: translateY(-3px);
    box-shadow: var(--shadow-hover);
}

.blog-meta {
    color: var(--text-color);
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
}

/* Contact Form */
.contact-section {
    max-width: 600px;
    margin: 0 auto;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    outline: none;
    border-color: var(--primary-color);
}

textarea.form-control {
    resize: vertical;
    min-height: 150px;
}

/* Messages */
.messages {
    position: fixed;
    top: 80px;
    right: 20px;
    z-index: 1100;
}

.alert {
    padding: 1rem 1.5rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    box-shadow: var(--shadow);
    animation: slideIn 0.3s ease;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

/* Footer */
.footer {
    background-color: var(--dark-color);
    color: white;
    padding: 2rem 0;
    text-align: center;
}

/* Utilities */
.text-center {
    text-align: center;
}

.mt-4 {
    margin-top: 2rem;
}

/* Responsive Design */
@media (max-width: 768px) {
    .nav-menu {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background-color: white;
        box-shadow: var(--shadow);
        flex-direction: column;
        padding: 1rem;
    }
    
    .nav-menu.active {
        display: flex;
    }
    
    .nav-toggle {
        display: flex;
    }
    
    .hero-title {
        font-size: 2rem;
    }
    
    .hero-buttons {
        flex-direction: column;
        align-items: center;
    }
    
    .experience-timeline {
        padding-left: 1rem;
    }
    
    .experience-header {
        flex-direction: column;
        align-items: flex-start;
    }
}

@media (max-width: 480px) {
    .project-grid,
    .blog-grid {
        grid-template-columns: 1fr;
    }
}